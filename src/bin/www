#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('testapp:server');
var http = require('http');
var dlib = require('../sqlite_con_man');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
// connect sqlite db;


var db = new dlib('../app.db');

function listenCB() {
    console.log(db.datamulti, "done setup");
    db.e.removeListener('done', listenCB);
   //db.db.close();
    db = null; //delete
}
db.multiquery([
    "CREATE TABLE IF NOT EXISTS test(" +
    "id INTEGER PRIMARY KEY," +
    "t_name VARCHAR(50)," +
    "t_val VARCHAR(7) DEFAULT '0'," +
    "t_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP)",
    "CREATE TABLE IF NOT EXISTS log_info(" +
    "id INTEGER PRIMARY KEY," +
    "log_info VARCHAR(200)," +
		"t_id INTEGER," +
    "log_image VARCHAR(100))",
    "CREATE TABLE IF NOT EXISTS test_cases_reg(" +
    "id INTEGER PRIMARY KEY,"+
    "tcr_name VARCHAR(50),"+
    "tcr_specs VARCHAR(200),"+
    "tcr_username VARCHAR(100)"+
    ")"
    ,
    "CREATE TABLE IF NOT EXISTS test_cases(" +
    "id INTEGER PRIMARY KEY,"+
    "tcr_id INTEGER,"+
    "tc_name VARCHAR(50),"+
    "tc_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,"+
    "tc_description VARCHAR(300),"+
    "tc_expected VARCHAR(200),"+
    "tc_actual VARCHAR(200),"+
    "tc_pass_fail CHAR,"+
    "tc_comment VARCHAR(300)"+
    ")"
]);
db.e.on('done', listenCB);

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}
